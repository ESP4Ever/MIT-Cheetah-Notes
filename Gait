References:
[1] J. Di Carlo, P. M. Wensing, B. Katz, G. Bledt and S. Kim, "Dynamic Locomotion in the MIT Cheetah 3 Through Convex Model-Predictive Control," 2018 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), Madrid, 2018, pp. 1-9, doi: 10.1109/IROS.2018.8594448.

Variables:
currentIteration: current number of iterations
iterationsPerMPC: number of iterations per segment
_nIterations: number of segments in a step (10 to 16 in the paper)
_iteration: the number of segments in a gait cycle
_phase: the current percentage in a gait cycle

Function:
>>>>>>> OffsetDurationGait(int nSegment, Vec4<int> offset, Vec4<int> durations, const std::string& name)
	Function: Constructor of class OffsetDurationGait
		Assign parameter name to member _name in the object
		Allocate memory and create _mpc_table array (nSegment * 4)
		Array _offsetsFloat stores the value of each element pair in offsets divided by nSegment (mapped to between 0-1)
		Array _durationsFloat stores the value of each element pair in durations divided by nSegment (mapped to between 0-1)
		_stance stores the 0th element in the array durations
		_swing stores the difference between nSegment and _stance

>>>>>>> MixedFrequncyGait::MixedFrequncyGait(int nSegment, Vec4<int> periods, float duty_cycle, const std::string &name)
	Function: Constructor of class MixedFrequncyGait
		Assign parameter name to member _name in the object
		Assign the parameter _duty_cycle to the member _duty_cycle in the object
		Allocate memory and create the _mpc_table array (nSegment * 4)
		Assign the parameter periods to the member _periods in the object
		Assign the parameter nSegment to the member _nIterations in the object
		Initialize the member _iteration in the object to 0
		Initialize the member _phase in the object to an array of all 0s (4)

>>>>>>> OffsetDurationGait::~OffsetDurationGait()
	Function: Destructor of the class OffsetDurationGait
	Release the memory area requested for _mpc_table in the constructor

>>>>>>> MixedFrequncyGait::~MixedFrequncyGait()
	Function: Destructor of the class MixedFrequncyGait
	Release the memory area requested for _mpc_table in the constructor

>>>>>>>> Vec4<float> OffsetDurationGait::getContactState()
	Function: Get the percentage of each leg's current state in the support phase (the function name means to get the contact state, but it seems irrelevant)
	Create a four-dimensional array progress. Each element in progress stores the difference between each element in _phase and _offsetsFloat. _phase is the current progress (percentage), and _offsetsFloat is the percentage of each leg's phase difference in one cycle. Here is an example: taking the walk gait as an example, in the walk gait, _offsetsFloat=[0.00 0.25 0.50 0.75], assuming that the progress at this time is _phase=[0.80 0.80 0.80 0.80], that is, the state of the body at this time has gone through 0.8 gait cycles compared to the starting state, then progress=[0.80 0.55 0.30 0.05], and in the walk gait, _durationsFloat=[0.75 0.75 0.75 0.75]. According to the following processing in the source code, we can get progress=[0.00 0.55/0.75 0.30/0.75 0.05/0.75], which means: the leg represented by the first element has entered the swing phase, so it is set to 0; the last three elements represent the percentage of these three legs currently in the support phase
	Return matrix progress

>>>>>>> Vec4<float> MixedFrequncyGait::getContactState()
	Function: I don’t quite understand it at the moment, but the logic is similar to OffsetDurationGait::getContactState()

>>>>>>> Vec4<float> OffsetDurationGait::getSwingState()
	Function: Get the percentage of the current state of each leg in the swing phase
	Here is an example: Take the walk gait as an example, in the walk gait, _offsetsFloat=[0.00 0.25 0.50 0.75], _durationsFloat=[0.75 0.75 0.75 0.75], so swing_offset=[0.75 1.00 1.25 1.50]=[0.75 0.00 0.25 0.50]. The array swing_duration stores the percentage of the swing phase in a gait cycle in the current gait, so in the walk gait, swing_duration=[0.25 0.25 0.25 0.25]. Assuming that the progress_phase=[0.80 0.80 0.80 0.80] at this time, that is, the state of the body at this time has gone through 0.8 gait cycles compared to the starting state, then progress=[0.05 0.80 0.55 0.30]. According to the following processing in the source code, we can get progress = [0.05/0.25 0.00 0.00 0.00], which means: the leg represented by the first element has entered the swing phase and is currently at the 0.05/0.25 position of the swing phase; the last three elements represent that these three legs are currently in the support phase, so they are set to 0
	Return matrix progress

>>>>>>> Vec4<float> MixedFrequncyGait::getSwingState()
	Function: I don’t quite understand it at the moment, but the logic is similar to OffsetDurationGait::getSwingState()

>>>>>>> int* OffsetDurationGait::getMpcTable()
	Function: Store the contact state of each leg in each segment in the array _mpc_table. The so-called "segment" is to divide a complete gait cycle into several segments for MPC planning, which is equivalent to the discretization process of a complete continuous action.
	The contact state here is determined based on the current progress in the total number of segments. If it touches the ground, set it to 1, otherwise set it to 0
	Return array _mpc_table

>>>>>>> int* MixedFrequncyGait::getMpcTable()
	Function: I don’t quite understand it at the moment, but the logic is similar to OffsetDurationGait::getMpcTable()

>>>>>>> void OffsetDurationGait::setIterations(int iterationsPerMPC, int currentIteration)
	Function: _iteration is the number of segments in a gait cycle
	_phase is the percentage of the current gait cycle

>>>>>>> void MixedFrequncyGait::setIterations(int iterationsBetweenMPC, int currentIteration)
	Function: I don’t quite understand it at the moment, but the logic is similar to OffsetDurationGait::setIterations(int iterationsPerMPC, int currentIteration)

>>>>>>>> int OffsetDurationGait::getCurrentGaitPhase()
	Function: Return parameter _iteration

>>>>>>>> int MixedFrequncyGait::getCurrentGaitPhase() {
	Function: Return 0

>>>>>>>> float OffsetDurationGait::getCurrentSwingTime(float dtMPC, int leg)
	Function: Return the swing phase time

>>>>>>> float MixedFrequncyGait::getCurrentSwingTime(float dtMPC, int leg)
	Function: I don't quite understand it at the moment, but the logic is similar to OffsetDurationGait::getCurrentSwingTime(float dtMPC, int leg)

>>>>>>> float OffsetDurationGait::getCurrentStanceTime(float dtMPC, int leg)
	Function: Returns the time of the support phase

>>>>>>>> float MixedFrequncyGait::getCurrentStanceTime(float dtMPC, int leg) {
	Function: I don't quite understand it at the moment, but the logic is similar to OffsetDurationGait::getCurrentStanceTime(float dtMPC, int leg)

>>>>>>> void OffsetDurationGait::debugPrint()
	Function: Empty function

>>>>>>>> void MixedFrequncyGait::debugPrint()
	Function: Empty function
