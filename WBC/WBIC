声明WBIC_ExtraData类

声明WBIC类，公有继承自WBC类

数据成员：_dim_floating ------ 浮动基座的自由度
        _eye ------ 动态矩阵，单位阵
        _eye_floating ------ 动态矩阵，单位阵


>>>>>>> WBIC<T>::WBIC(size_t num_qdot, const std::vector<ContactSpec<T>*>* contact_list, const std::vector<Task<T>*>* task_list)
    函数功能：构造函数，初始化参数
            _dim_floating初始化为6
            _eye初始化为num_qdot x num_qdot的单位阵
            _eye_floating初始化为_dim_floating x _dim_floating(即6x6)的单位阵

>>>>>>> virtual ~WBIC()
    函数功能：析构函数，空函数

>>>>>>> virtual void UpdateSetting(const DMat<T>& A, const DMat<T>& Ainv, const DVec<T>& cori, const DVec<T>& grav, void* extra_setting = NULL)
    函数功能：更新拉格朗日动力学参数

>>>>>>> void WBIC<T>::MakeTorque(DVec<T>& cmd, void* extra_input)
    函数功能：调用_SetOptimizationSize设置优化问题的问题规模
             调用_SetCost设置优化问题的目标函数
             //TODO！ 
             判断rf的维度，如果大于零，即有支撑腿
                调用_ContactBuilding完成接触Jacobian、摩擦锥等的初始化
                调用_SetInEqualityConstraint
             否则

>>>>>>> void WBIC<T>::_SetOptimizationSize()
    函数功能：设置优化问题的规模
             _dim_rf初始化为0
             _dim_Uf初始化为0
             _dim_rf表示支撑的维度，大小是(3 * 支撑腿的数目)
             _dim_Uf表示总摩擦锥的维度，大小是(6 * 支撑腿的数目)
             _dim_opt表示优化问题的整体维度(6 + 3 * 支撑腿的数目)
             _dim_eq_cstr应该表示等式约束的维度，大小是6
             
             以下为对优化求解器所需变量的设置：
             矩阵G初始化为_dim_opt x _dim_opt的全零矩阵
             向量g0初始化为长度为_dim_opt的全零向量
             矩阵CE初始化为_dim_opt x _dim_eq_cstr的全零矩阵
             向量ce0初始化为长度为_dim_eq_cstr的全零向量
             矩阵_dyn_CE初始化为_dim_eq_cstr x _dim_opt的全零矩阵
             向量_dyn_ce0初始化为维度为_dim_eq_cstr的向量

             判断_dim_rf的值，如果大于零，即有支撑腿
                矩阵CI初始化为_dim_opt x _dim_Uf的全零矩阵
                向量ci0初始化为维度为_dim_Uf的全零向量
                矩阵_dyn_CI初始化为_dim_Uf x _dim_opt的全零矩阵
                向量_dyn_ci0初始化为维度为_dim_Uf的向量
                矩阵_Jc初始化为_dim_rf x 18的矩阵
                向量_JcDotQdot初始化为维度为_dim_rf的向量
                向量_Fr_des初始化为维度为_dim_rf的向量，承接MPC的计算结果
                矩阵_Uf初始化为_dim_Uf x _dim_rf的全零矩阵，表示总摩擦锥约束
                向量_Uf_ieq_vec初始化为维度为_dim_Uf的向量，表示摩擦锥约束的边界
             否则，即没有支撑腿
                矩阵CI初始化为_dim_opt x 18的矩阵
                向量ci0初始化为0的单元素向量
             
>>>>>>> void WBIC<T>::_SetCost()
    函数功能：设置优化问题的目标函数
             idx_offset初始化为0
             矩阵G的左上角6 x 6的块为元素全为0.1的对角阵
             矩阵G的右下角(3 * contactNum) x (3 * contactNum)的块为元素全为1.0的对角阵

>>>>>>> void WBIC<T>::_ContactBuilding()
    函数功能：完成接触Jacobian、摩擦锥等的初始化
             感觉这里的操作与FindConfiguration函数中的操作有重复

             访问足端接触列表的首元素，更新Jc，这里的Jc应该是对应任务的Jc，维度是3 x 18
             访问足端接触列表的首元素，更新JcDotQdot
             访问足端接触列表的首元素，更新Uf，摩擦锥约束块，维度是6 x 3
             访问足端接触列表的首元素，更新Uf_ieq_vec，摩擦锥约束的边界，维度是6 x 1
             访问足端接触列表的首元素，调用getDim函数，将接触力的维度(3)赋值给dim_accumul_rf
             访问足端接触列表的首元素，调用getDimRFConstraint函数，将摩擦锥约束块的维度(6)赋值给dim_accumul_uf
             更新_Jc，从索引(0,0)开始的3行18列的块设置为Jc
             更新_JcDotQdot，前3个元素设置为JcDotQdot
             更新_Uf，这个应该是总摩擦锥约束，从索引(0,0)开始的6行3列的块设置为Uf
             更新_Uf_ieq_vec，这个应该是总摩擦锥约束边界，前6个元素设置为Uf_ieq_vec
             更新_Fr_des，这个是承接MPC控制器的计算结果

             遍历其余的足端接触列表中的元素
                具体流程同上

>>>>>>> void WBIC<T>::_SetInEqualityConstraint()
    函数功能：设定不等式约束，满足求解器要求的格式
             //TODO 02-05
             
             




             
